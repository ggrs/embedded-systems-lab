/* ###################################################################
**     Filename    : Events.c
**     Project     : LAB1
**     Processor   : MKL25Z128VLK4
**     Component   : Events
**     Version     : Driver 01.00
**     Compiler    : GNU C Compiler
**     Date/Time   : 2019-08-21, 17:16, # CodeGen: 6
**     Abstract    :
**         This is user's event module.
**         Put your event handler code here.
**     Settings    :
**     Contents    :
**         Cpu_OnNMIINT - void Cpu_OnNMIINT(void);
**
** ###################################################################*/
/*!
** @file Events.c
** @version 01.00
** @brief
**         This is user's event module.
**         Put your event handler code here.
*/         
/*!
**  @addtogroup Events_module Events module documentation
**  @{
*/         
/* MODULE Events */

#include "Cpu.h"
#include "Events.h"

#ifdef __cplusplus
extern "C" {
#endif 


/* User includes (#include below this line is not maintained by Processor Expert) */
extern volatile uint8_t tec;				//!< Interrupcao de teclado
extern volatile uint8_t flag_col;			//!< Indicacao de coluna
extern volatile uint8_t time_counter;		//!< 
extern volatile uint8_t rtc_ready;			//!<
extern volatile uint8_t move;				//!<

/*
** ===================================================================
**     Event       :  Cpu_OnNMIINT (module Events)
**
**     Component   :  Cpu [MKL25Z128LK4]
*/
/*!
**     @brief
**         This event is called when the Non maskable interrupt had
**         occurred. This event is automatically enabled when the [NMI
**         interrupt] property is set to 'Enabled'.
*/
/* ===================================================================*/
void Cpu_OnNMIINT(void)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Event       :  Wifi_OnRcvChar (module Events)
**
**     Component   :  Wifi [AsynchroSerial]
**     Description :
**         This event is called after a correct character is received.
**         The event is available only when the <Interrupt
**         service/event> property is enabled and either the <Receiver>
**         property is enabled or the <SCI output mode> property (if
**         supported) is set to Single-wire mode.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void Wifi_OnRcvChar(void)
{
  /* Write your code here ... */
	extern volatile uint8_t br[256];
	extern volatile uint8_t ibr;
	extern volatile uint8_t mr;
	uint8_t c;
	
	Wifi_RecvChar(&c);
	br[ibr] = c;
	ibr++;
	
	
	if (c == 0x0A) {
		ibr -= 2;
		br[ibr] = 0; // indica o fim da string
		mr = 1; // mensagem recebida
		ibr = 0;
	}
}

/*
** ===================================================================
**     Event       :  Wifi_OnSendChar (module Events)
**
**     Component   :  Wifi [AsynchroSerial]
**     Description :
**         This event is called after a character is transmitted.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void Wifi_OnSendChar(void)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Event       :  RTC1_OnSecond (module Events)
**
**     Component   :  RTC1 [RTC_LDD]
*/
/*!
**     @brief
**         Called each second if OnSecond event is enabled (see
**         [SetEventMask] and [GetEventMask] methods) and RTC device is
**         enabled. This event is available only if [Interrupt
**         service/event] is enabled.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer is passed
**                           as the parameter of Init method. 
*/
/* ===================================================================*/
void RTC1_OnSecond(LDD_TUserData *UserDataPtr)
{
  /* Write your code here ... */
	
	/*
	if(time_counter > 0){
		time_counter--;
	} else if(time_counter == 0){
		rtc_ready = 1;
		time_counter = 2;
	}
	*/
	
}

/**
** ===================================================================
**     Event       :  TI1_OnInterrupt (module Events)
**
**     Component   :  TI1 [TimerInt]
**     Description :
**         When a timer interrupt occurs this event is called (only
**         when the component is enabled - <Enable> and the events are
**         enabled - <EnableEvent>). This event is enabled only if a
**         <interrupt service/event> is enabled.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void TI1_OnInterrupt(void)
{
  /* Write your code here ... */
	rtc_ready = 1;
	
}

/**
** ===================================================================
**     Event       :  C3_OnInterrupt (module Events)
**
**     Component   :  C3 [ExtInt]
**     Description :
**         This event is called when an active signal edge/level has
**         occurred.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void C3_OnInterrupt(void)
{
	WAIT2_Waitms(20);
	flag_col = 3;
	
	L1_SetOutput();
	L2_SetInput();
	L3_SetInput();
	L4_SetInput();
	WAIT2_Waitus(5);
	L1_ClrVal();
	WAIT2_Waitus(5);
	if(C3_GetVal() == 0){
		tec = 3;
	} else{
		L1_SetOutput();
		L2_SetOutput();
		L3_SetInput();
		L4_SetInput();
		WAIT2_Waitus(5);
		L1_ClrVal();
		L2_ClrVal();
		WAIT2_Waitus(5);

		if(C3_GetVal() == 0){
			tec = 6;
		} else{
			L1_SetOutput();
			L2_SetOutput();
			L3_SetOutput();
			L4_SetInput();
			WAIT2_Waitus(5);
			L1_ClrVal();	
			L2_ClrVal();			
			L3_ClrVal();
			WAIT2_Waitus(5);
			if(C3_GetVal() == 0){
				tec = 9;
			} else{
				L1_SetOutput();
				L2_SetOutput();
				L3_SetOutput();
				L4_SetOutput();
				WAIT2_Waitus(5);
				L1_ClrVal();				
				L2_ClrVal();
				L3_ClrVal();
				L4_ClrVal();
				WAIT2_Waitus(5);
				if(C3_GetVal() == 0){
					tec = 11;
				} 
			}
		}
	}
	
	// Reset para valores de inicializacao
	L1_SetOutput();
	L2_SetOutput();
	L3_SetOutput();
	L4_SetOutput();
	WAIT2_Waitus(5);
	L1_ClrVal();				
	L2_ClrVal();
	L3_ClrVal();
	L4_ClrVal();
	WAIT2_Waitus(5);

}

/**
** ===================================================================
**     Event       :  C2_OnInterrupt (module Events)
**
**     Component   :  C2 [ExtInt]
**     Description :
**         This event is called when an active signal edge/level has
**         occurred.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void C2_OnInterrupt(void)
{
	WAIT2_Waitms(20);
	flag_col = 2;
	
	L1_SetOutput();
	L2_SetInput();
	L3_SetInput();
	L4_SetInput();
	WAIT2_Waitus(5);
	L1_ClrVal();
	WAIT2_Waitus(5);
	if(C2_GetVal() == 0){
		tec = 2;
	} else{
		L1_SetOutput();
		L2_SetOutput();
		L3_SetInput();
		L4_SetInput();
		WAIT2_Waitus(5);
		L1_ClrVal();
		L2_ClrVal();
		WAIT2_Waitus(5);

		if(C2_GetVal() == 0){
			tec = 5;
		} else{
			L1_SetOutput();
			L2_SetOutput();
			L3_SetOutput();
			L4_SetInput();
			WAIT2_Waitus(5);
			L1_ClrVal();	
			L2_ClrVal();			
			L3_ClrVal();
			WAIT2_Waitus(5);
			if(C2_GetVal() == 0){
				tec = 8;
			} else{
				L1_SetOutput();
				L2_SetOutput();
				L3_SetOutput();
				L4_SetOutput();
				WAIT2_Waitus(5);
				L1_ClrVal();				
				L2_ClrVal();
				L3_ClrVal();
				L4_ClrVal();
				WAIT2_Waitus(5);
				if(C2_GetVal() == 0){
					tec = 0;
				} 
			}
		}
	}
	
	// Reset para valores de inicializacao
	L1_SetOutput();
	L2_SetOutput();
	L3_SetOutput();
	L4_SetOutput();
	WAIT2_Waitus(5);
	L1_ClrVal();				
	L2_ClrVal();
	L3_ClrVal();
	L4_ClrVal();
	WAIT2_Waitus(5);
	
}

/**
** ===================================================================
**     Event       :  C1_OnInterrupt (module Events)
**
**     Component   :  C1 [ExtInt]
**     Description :
**         This event is called when an active signal edge/level has
**         occurred.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void C1_OnInterrupt(void)
{
	WAIT2_Waitms(20);
	flag_col = 1;
	
	L1_SetOutput();
	L2_SetInput();
	L3_SetInput();
	L4_SetInput();
	WAIT2_Waitus(5);
	L1_ClrVal();
	WAIT2_Waitus(5);
	if(C1_GetVal() == 0){
		tec = 1;
	} else{
		L1_SetOutput();
		L2_SetOutput();
		L3_SetInput();
		L4_SetInput();
		WAIT2_Waitus(5);
		L1_ClrVal();
		L2_ClrVal();
		WAIT2_Waitus(5);

		if(C1_GetVal() == 0){
			tec = 4;
		} else{
			L1_SetOutput();
			L2_SetOutput();
			L3_SetOutput();
			L4_SetInput();
			WAIT2_Waitus(5);
			L1_ClrVal();	
			L2_ClrVal();			
			L3_ClrVal();
			WAIT2_Waitus(5);
			if(C1_GetVal() == 0){
				tec = 7;
			} else{
				L1_SetOutput();
				L2_SetOutput();
				L3_SetOutput();
				L4_SetOutput();
				WAIT2_Waitus(5);
				L1_ClrVal();				
				L2_ClrVal();
				L3_ClrVal();
				L4_ClrVal();
				WAIT2_Waitus(5);
				if(C1_GetVal() == 0){
					tec = 10;
				} 
			}
		}
	}
	
	// Reset para valores de inicializacao
	L1_SetOutput();
	L2_SetOutput();
	L3_SetOutput();
	L4_SetOutput();
	WAIT2_Waitus(5);
	L1_ClrVal();				
	L2_ClrVal();
	L3_ClrVal();
	L4_ClrVal();
	WAIT2_Waitus(5);
	
}

/**
** ===================================================================
**     Event       :  SM1_OnBlockSent (module Events)
**
**     Component   :  SM1 [SPIMaster_LDD]
*/
/*!
**     @brief
**         This event is called after the last character from the
**         output buffer is moved to the transmitter. This event is
**         available only if the SendBlock method is enabled.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. The pointer is passed
**                           as the parameter of Init method. 
*/
/* ===================================================================*/
void SM1_OnBlockSent(LDD_TUserData *UserDataPtr)
{
  /* Write your code here ... */
}

/*
** ===================================================================
**     Event       :  PC_OnRcvChar (module Events)
**
**     Component   :  PC [AsynchroSerial]
**     Description :
**         This event is called after a correct character is received.
**         The event is available only when the <Interrupt
**         service/event> property is enabled and either the <Receiver>
**         property is enabled or the <SCI output mode> property (if
**         supported) is set to Single-wire mode.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void PC_OnRcvChar(void)
{
  /* Write your code here ... */
}

/**
** ===================================================================
**     Event       :  PIR_OnInterrupt (module Events)
**
**     Component   :  PIR [ExtInt]
**     Description :
**         This event is called when an active signal edge/level has
**         occurred.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void PIR_OnInterrupt(void)
{
  move = 1;
}

/*
** ===================================================================
**     Event       :  SM1_OnBlockReceived (module Events)
**
**     Component   :  SM1 [SPIMaster_LDD]
*/
/*!
**     @brief
**         This event is called when the requested number of data is
**         moved to the input buffer. This method is available only if
**         the ReceiveBlock method is enabled.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. The pointer is passed
**                           as the parameter of Init method. 
*/
/* ===================================================================*/
void SM1_OnBlockReceived(LDD_TUserData *UserDataPtr)
{
  /* Write your code here ... */
}

/* END Events */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
